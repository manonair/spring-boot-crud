pipeline {
        agent {
        label "master"
        }  
    
    environment {
        NEXUS_VERSION = "nexus3"
        NEXUS_PROTOCOL = "http"
        NEXUS_URL = "localhost:8081"
        NEXUS_REPOSITORY = "mt-snapshot"
        NEXUS_CREDENTIAL_ID = "nexus-creds"
    }    

 
    stages {
        stage("checkout the project"){
            steps{
                echo "====++++checkout the project++++===="
                script {
                    // Let's clone the source
                  checkout([$class: 'GitSCM', branches: [[name: '*/master']], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [[url: 'https://github.com/manonair/spring-boot-crud.git']]])
                }
            } 
        }
       
         stage("Compilation and Code Analysis"){
             parallel {
                // 5)	Build the code using Maven/Ant and send the notification to developer in case of build fail 
                stage("Compilation"){        
                   
                    steps{
                        echo "====++++Compilation ++++===="
                        sh "mvn clean verify -DskipTests"
                    }
                    post{
                        failure{
                            echo "====++++Compilation failed++++===="
                        }
                    }
                } 

                stage("Checkstyle") {
                    steps{     
                        echo "====++++Checkstyle++++===="            
                        sh "mvn checkstyle:checkstyle"
                    step([$class: 'CheckStylePublisher',
                        canRunOnFailed: true,
                        defaultEncoding: '',
                        healthy: '100',
                        pattern: '**/target/checkstyle-result.xml',
                        unHealthy: '90',
                        useStableBuildAsReference: true
                    ])
                    }   
                }
            }
        }
//6) Unit test the code using Junit  
        stage("Unit test"){
            steps{
               echo "====++++Unit test++++===="
                sh "mvn test -Punit"
                step([$class: 'JUnitResultArchiver', testResults: '**/target/surefire-reports/TEST-*UnitTest.xml'])
            }
            post{
                failure{
                    echo "====++++Unit test execution failed++++===="
                }
            }
        }
        stage("Runing integration tests"){
            steps{
               echo "====++++Runing integration tests++++===="
                sh "mvn test -Pintegration"
                step([$class: 'JUnitResultArchiver', testResults: '**/target/surefire-reports/TEST-'+ '*IntegrationTest.xml'])
            }
            post{
                failure{
                    echo "====++++ARuning integration tests execution failed++++===="
                }
            }
        }


        // 7)	Do static code analysis using SonarQube, create quality gate to pass to next environment
        // stage("Sonarqube analysis"){
        //     steps{
        //        echo "====++++Sonarqube analysis++++===="
        //         withSonarQubeEnv('sonar-6') {
        //             sh "mvn sonar:sonar" 
                    
        //         }
        //     }
        // } 
        // stage('Sonar scan result check') {
        //     steps {
        //          echo "====++++Sonarqube result check++++===="
        //         script {
        //              sleep(60)
        //             timeout(time: 5, unit: 'MINUTES') {
        //                 def qg = waitForQualityGate()
        //                 if (qg.status != 'OK') {
        //                     error "Pipeline aborted due to quality gate failure: ${qg.status}"
        //                 }
        //             }                    
        //         }
        //     }
        // }

// 8)	Create the package and store in Artifactory/Nexus 

        stage("publish to nexus") {
            steps {
                script {
                    // Read POM xml file using 'readMavenPom' step , this step 'readMavenPom' is included in: https://plugins.jenkins.io/pipeline-utility-steps
                    pom = readMavenPom file: "pom.xml";
                    // Find built artifact under target folder
                    filesByGlob = findFiles(glob: "target/*.${pom.packaging}");
                    // Print some info from the artifact found
                    echo "${filesByGlob[0].name} ${filesByGlob[0].path} ${filesByGlob[0].directory} ${filesByGlob[0].length} ${filesByGlob[0].lastModified}"
                    // Extract the path from the File found
                    artifactPath = filesByGlob[0].path;
                    // Assign to a boolean response verifying If the artifact name exists
                    artifactExists = fileExists artifactPath;
                    if(artifactExists) {
                        echo "*** File: ${artifactPath}, group: ${pom.groupId}, packaging: ${pom.packaging}, version: ${pom.version}, artifactId: ${pom.artifactId}";
                        nexusArtifactUploader(
                            nexusVersion: NEXUS_VERSION,
                            protocol: NEXUS_PROTOCOL,
                            nexusUrl: NEXUS_URL,
                            groupId: pom.groupId,
                            version: pom.version,
                            repository: NEXUS_REPOSITORY,
                            credentialsId: NEXUS_CREDENTIAL_ID,
                            artifacts: [
                                // Artifact generated such as .jar, .ear and .war files.
                                [artifactId: pom.artifactId,
                                classifier: '',
                                file: artifactPath,
                                type: pom.packaging],
                                // Lets upload the pom.xml file for additional information for Transitive dependencies
                                [artifactId: pom.artifactId,
                                classifier: '',
                                file: "pom.xml",
                                type: "pom"]
                            ]
                        );
                    } else {
                        error "*** File: ${artifactPath}, could not be found";
                    }
                }
            }
        }

    }

}

def emailNotification(String buildStatus = 'STARTED') {
    String recipient = 'manonair20@gmail.com'
   buildStatus =  buildStatus ?: 'SUCCESSFUL'
   def subject = "${buildStatus}: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]'"
   def summary = "${subject} (${env.BUILD_URL})"
   def details = """<p>STARTED: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]':</p>
    <p>Check console output at "<a href="${env.BUILD_URL}">${env.JOB_NAME} [${env.BUILD_NUMBER}]</a>"</p>"""
   emailext (
       subject: subject,
       body: details,
       to: recipient,
        from: 'manonair20@gmail.com'
     )
 }
